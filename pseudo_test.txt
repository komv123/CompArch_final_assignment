Switch first_7_bits {
    case 0110011: R_type(other_25_bits)
    case 0010011 | 0000011 | 1100111 | 1110011: I_type(other_25_bits)
    case 0100011: S_type(other_25_bits)
    case 1100011: B_type(other_25_bits)
    case 0110111 | 0010111: U_type(other_25_bits)
    case 1101111: J_type(other_25_bits)
    case _: error
}

R_type(25_bits) {
    Switch first_5_bits {
        case 00000: pass
        case 00001: x1 = funct3(0110011, other_20_bits)
        case 00010: x2 = funct3(0110011, other_20_bits)
        case 00011: x3 = funct3(0110011, other_20_bits)
        ...
        case 11111: x31 = funct3(0110011, other_20_bits)
        case _: error
    }
}

funct3(Opcode, 20_bits) {
    rs1(Opcode, first_3_bits, other_17_bits)
}

rs1(Opcode, funct3, 17_bits) {
    Switch Opcode {
        case 0110011 | 0100011 | 1100011: rs2(Opcode, funct3, first_5_bits, other_12_bits)
        case 0010011 | 0000011 | 1100111 | 1110011: //TODO: missing immidiate logic
        case _: error
    }
}

rs2(Opcode, funct3, rs1, other_12_bits) {
    Switch Opcode {
        case 0110011: Switch (funct3, last_7_bits) {
            case 000, 0000000: add(rs1, first_5_bits)
            case 000, 0100000: sub(rs1, first_5_bits)
            case 100, 0000000: xor(rs1, first_5_bits)
            case 110, 0000000: or(rs1, first_5_bits)
            case 111, 0000000: and(rs1, first_5_bits)
            case 001, 0000000: sll(rs1, first_5_bits)
            case 101, 0000000: srl(rs1, first_5_bits)
            case 101, 0100000: sra(rs1, first_5_bits)
            case 010, 0000000: slt(rs1, first_5_bits)
            case 011, 0000000: sltu(rs1, first_5_bits)
        }
    }
}
